// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: ws_test.proto

package ws_test

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WSTest_GetUserBalance_FullMethodName = "/ws_test.WSTest/GetUserBalance"
)

// WSTestClient is the client API for WSTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WSTestClient interface {
	GetUserBalance(ctx context.Context, in *GetUserBalanceRequest, opts ...grpc.CallOption) (*GetUserBalanceResponse, error)
}

type wSTestClient struct {
	cc grpc.ClientConnInterface
}

func NewWSTestClient(cc grpc.ClientConnInterface) WSTestClient {
	return &wSTestClient{cc}
}

func (c *wSTestClient) GetUserBalance(ctx context.Context, in *GetUserBalanceRequest, opts ...grpc.CallOption) (*GetUserBalanceResponse, error) {
	out := new(GetUserBalanceResponse)
	err := c.cc.Invoke(ctx, WSTest_GetUserBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WSTestServer is the server API for WSTest service.
// All implementations must embed UnimplementedWSTestServer
// for forward compatibility
type WSTestServer interface {
	GetUserBalance(context.Context, *GetUserBalanceRequest) (*GetUserBalanceResponse, error)
	mustEmbedUnimplementedWSTestServer()
}

// UnimplementedWSTestServer must be embedded to have forward compatible implementations.
type UnimplementedWSTestServer struct {
}

func (UnimplementedWSTestServer) GetUserBalance(context.Context, *GetUserBalanceRequest) (*GetUserBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBalance not implemented")
}
func (UnimplementedWSTestServer) mustEmbedUnimplementedWSTestServer() {}

// UnsafeWSTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WSTestServer will
// result in compilation errors.
type UnsafeWSTestServer interface {
	mustEmbedUnimplementedWSTestServer()
}

func RegisterWSTestServer(s grpc.ServiceRegistrar, srv WSTestServer) {
	s.RegisterService(&WSTest_ServiceDesc, srv)
}

func _WSTest_GetUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WSTestServer).GetUserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WSTest_GetUserBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WSTestServer).GetUserBalance(ctx, req.(*GetUserBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WSTest_ServiceDesc is the grpc.ServiceDesc for WSTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WSTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ws_test.WSTest",
	HandlerType: (*WSTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserBalance",
			Handler:    _WSTest_GetUserBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ws_test.proto",
}
